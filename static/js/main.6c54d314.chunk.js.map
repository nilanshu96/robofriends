{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","CHANGE_SEARCH_FIELD","GET_ROBOTS_PENDING","GET_ROBOTS_SUCCESS","GET_ROBOTS_FAILED","App","isPending","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","getRobots","connect","fetchRobots","searchRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearchState","initialFetchState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c54d314.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}.png?size=200x200`} alt=\"robot\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map(user => {\n                    return (<Card key={user.id} id={user.id} name={user.name} email={user.email} />);\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops! Unable to fetch data.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { setSearchField, getRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\n    const { robots, error, isPending } = state.fetchRobots;\n    const { searchField } = state.searchRobots;\n    return {\n        searchField, robots, error, isPending\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: (event) => {\n        dispatch(setSearchField(event.target.value));\n    },\n    getRobots: () => dispatch(getRobots())\n})\n\nclass App extends React.Component {\n\n    render() {\n\n        const { robots, error, isPending, searchField, onSearchChange } = this.props;\n\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        if (isPending) {\n            return <h1>LOADING</h1>\n        } else if (error) {\n            return <h1>Failed to fetch the Robots</h1>\n        }\n        else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1\">RoboFriends</h1>\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        this.props.getRobots();\n    }\n}\n\n// Using React Hooks\n// const App = () => {\n\n//     const [robots, setRobots] = useState([]);\n//     const [searchField, setSearchField] = useState('');\n\n//     useEffect(() => {\n//         fetch('https://jsonplaceholder.typicode.com/users')\n//             .then(response => response.json())\n//             .then(users => setRobots(users));\n//     }, []);\n\n//     const onSearchChange = (event) => {\n//         setSearchField(event.target.value);\n//     }\n\n//     const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n//     if (filteredRobots.length === 0) {\n//         return <h1>LOADING</h1>\n//     } else {\n//         return (\n//             <div className=\"tc\">\n//                 <h1 className=\"f1\">RoboFriends</h1>\n//                 <SearchBox searchChange={onSearchChange} />\n//                 <Scroll>\n//                     <ErrorBoundary>\n//                         <CardList robots={filteredRobots} />\n//                     </ErrorBoundary>\n//                 </Scroll>\n//             </div>\n//         )\n//     }\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const getRobots = () => (dispatch) => {\n    dispatch({type: GET_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(robots => dispatch({type: GET_ROBOTS_SUCCESS, payload: robots}))\n            .catch(error => dispatch({type: GET_ROBOTS_FAILED, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED } from './constants';\n\nconst initialSearchState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialSearchState, action = {}) => {\n\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialFetchState = {\n    isPending: true,\n    robots: [],\n    error: null\n}\n\nexport const fetchRobots = (state = initialFetchState, action = {}) => {\n\n    switch(action.type) {\n        case GET_ROBOTS_PENDING: \n            return {...state, isPending: true};\n        case GET_ROBOTS_SUCCESS:\n            return {...state, isPending: false, robots: action.payload};\n        case GET_ROBOTS_FAILED:\n            return {...state, isPending: false, error: action.payload};\n        default: \n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport 'tachyons';\nimport './index.css';\nimport { searchRobots, fetchRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, fetchRobots});\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}