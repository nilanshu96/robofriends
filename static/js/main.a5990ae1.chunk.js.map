{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","console","log","map","user","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","Header","nextProps","nextState","Component","ErrorBoundary","state","hasError","error","info","this","setState","React","CHANGE_SEARCH_FIELD","GET_ROBOTS_PENDING","GET_ROBOTS_SUCCESS","GET_ROBOTS_FAILED","App","isPending","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","getRobots","connect","fetchRobots","searchRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialSearchState","initialFetchState","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a5990ae1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}.png?size=200x200`} alt=\"robot\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    console.log(\"CARDLIST\");\n    return (\n        <div>\n            {\n                robots.map(user => {\n                    return (<Card key={user.id} id={user.id} name={user.name} email={user.email} />);\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    console.log(\"SEARCHBOX\");\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange} />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import { Component } from 'react';\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        console.log('HEADER');\n        return <h1 className=\"f1\">RoboFriends</h1>;\n    }\n}\n\nexport default Header;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops! Unable to fetch data.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const GET_ROBOTS_PENDING = 'GET_ROBOTS_PENDING';\nexport const GET_ROBOTS_SUCCESS = 'GET_ROBOTS_SUCCESS';\nexport const GET_ROBOTS_FAILED = 'GET_ROBOTS_FAILED';","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport { setSearchField, getRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\n    const { robots, error, isPending } = state.fetchRobots;\n    const { searchField } = state.searchRobots;\n    return {\n        searchField, robots, error, isPending\n    }\n};\n\nconst mapDispatchToProps = dispatch => ({\n    onSearchChange: (event) => {\n        dispatch(setSearchField(event.target.value));\n    },\n    getRobots: () => dispatch(getRobots())\n})\n\nclass App extends React.Component {\n\n    render() {\n\n        const { robots, error, isPending, searchField, onSearchChange } = this.props;\n\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n        if (isPending) {\n            return <h1>LOADING</h1>\n        } else if (error) {\n            return <h1>Failed to fetch the Robots</h1>\n        }\n        else {\n            return (\n                <div className=\"tc\">\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n\n    componentDidMount() {\n        this.props.getRobots();\n    }\n}\n\n// Using React Hooks\n// const App = () => {\n\n//     const [robots, setRobots] = useState([]);\n//     const [searchField, setSearchField] = useState('');\n\n//     useEffect(() => {\n//         fetch('https://jsonplaceholder.typicode.com/users')\n//             .then(response => response.json())\n//             .then(users => setRobots(users));\n//     }, []);\n\n//     const onSearchChange = (event) => {\n//         setSearchField(event.target.value);\n//     }\n\n//     const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n//     if (filteredRobots.length === 0) {\n//         return <h1>LOADING</h1>\n//     } else {\n//         return (\n//             <div className=\"tc\">\n//                 <h1 className=\"f1\">RoboFriends</h1>\n//                 <SearchBox searchChange={onSearchChange} />\n//                 <Scroll>\n//                     <ErrorBoundary>\n//                         <CardList robots={filteredRobots} />\n//                     </ErrorBoundary>\n//                 </Scroll>\n//             </div>\n//         )\n//     }\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const getRobots = () => (dispatch) => {\n    dispatch({type: GET_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(robots => dispatch({type: GET_ROBOTS_SUCCESS, payload: robots}))\n            .catch(error => dispatch({type: GET_ROBOTS_FAILED, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, GET_ROBOTS_PENDING, GET_ROBOTS_SUCCESS, GET_ROBOTS_FAILED } from './constants';\n\nconst initialSearchState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialSearchState, action = {}) => {\n\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialFetchState = {\n    isPending: true,\n    robots: [],\n    error: null\n}\n\nexport const fetchRobots = (state = initialFetchState, action = {}) => {\n\n    switch(action.type) {\n        case GET_ROBOTS_PENDING: \n            return {...state, isPending: true};\n        case GET_ROBOTS_SUCCESS:\n            return {...state, isPending: false, robots: action.payload};\n        case GET_ROBOTS_FAILED:\n            return {...state, isPending: false, error: action.payload};\n        default: \n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport ReduxThunk from 'redux-thunk';\nimport 'tachyons';\nimport './index.css';\nimport { searchRobots, fetchRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, fetchRobots});\n// const store = createStore(rootReducer, applyMiddleware(ReduxThunk, logger));\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n      <App />\n    </Provider>\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}